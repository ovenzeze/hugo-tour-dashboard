import { defineEventHandler, readBody, createError } from 'h3';
import { generateImage } from '~/server/services/geminiImageService';
import type { GenerateImageOptions, GenerateImageResult, GeminiImageModelType } from '~/types/gemini';
import { SupabaseStorageService } from '~/server/services/supabaseStorageService';
import { serverSupabaseServiceRole } from '#supabase/server'; // Import serverSupabaseServiceRole
import type { Database } from '~/types/supabase'; // Assuming Database type is needed

export default defineEventHandler(async (event) => {
  try {
    const options = await readBody<Partial<GenerateImageOptions>>(event);
    const config = useRuntimeConfig();

    const modelToUse = options.model || config.geminiImageModel as GeminiImageModelType | undefined;

    if (!options.prompt) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Bad Request',
        message: 'Missing required parameter: prompt must be provided.',
      });
    }

    if (!modelToUse) {
      throw createError({
        statusCode: 400,
        statusMessage: 'Bad Request',
        message: 'Missing required parameter: model must be provided in the request or configured as a default in .env (GEMINI_IMAGE_MODEL).',
      });
    }

    const fullOptions: GenerateImageOptions = {
      ...options, // Spread other options like numberOfImages, aspectRatio
      prompt: options.prompt,
      model: modelToUse, // Guaranteed to be a string here
    };

    const result: GenerateImageResult = await generateImage(fullOptions);

    // Check if images were generated and extract the first one
    if (result.images && result.images.length > 0) {
      // Assuming we only care about the first image for this endpoint's purpose

      console.log("[/api/ai/image/generate.post.ts] Image successfully generated by service. Uploading to Supabase Storage and returning URL.");

      // Get Supabase client with service role privileges
      const supabase = await serverSupabaseServiceRole<Database>(event);

      if (!supabase) {
        throw createError({
          statusCode: 500,
          statusMessage: 'Internal Server Error',
          message: 'Failed to get Supabase service role client.',
        });
      }

      // Using the configured Supabase storage bucket name from public runtime config
      const storageService = new SupabaseStorageService(supabase, config.public.supabaseStorageBucketName);


      const image = result.images[0];
      const fileExtension = image.mimeType.split('/')[1]; // e.g., 'png', 'jpeg'
      const filename = `generated-image-${Date.now()}.${fileExtension}`;
      const storagePath = `generated-images/${filename}`; // Path within the Supabase bucket

      // Convert base64 imageData to Buffer
      const imageBuffer = Buffer.from(image.imageData, 'base64');

      // Upload the image data
      await storageService.writeFile(storagePath, imageBuffer, { contentType: image.mimeType });

      // Get the public URL
      const imageUrl = storageService.getPublicUrl(storagePath);

      return {
        imageUrl: imageUrl,
        text: result.text, // Optionally include any accompanying text
      };
    } else {
      // No images were generated, or the images array was empty
      // Log the text part if it exists, as it might contain an explanation from the API
      console.error("[/api/ai/image/generate.post.ts] No images generated by service. Text from service (if any):", result.text);
      // Return an error or a specific structure indicating no image
      // Throwing an error that will be caught by the generic error handler below might be cleaner
      throw createError({
        statusCode: 404, // Or 500 if it implies an internal failure to generate
        statusMessage: "Image Generation Failed",
        message: result.text || "The image generation service did not return any images.",
      });
    }

  } catch (error: any) {
    console.error(`Error in /api/ai/image/generate.post.ts:`, error.message || error, error.stack);
    if (error.statusCode && error.statusMessage) { // It's already an H3 error
        throw error;
    }
    throw createError({
      statusCode: 500,
      statusMessage: `Failed to generate image: ${error.message || 'Unknown internal server error.'}`,
      data: { stack: error.stack, originalError: String(error) },
    });
  }
});
