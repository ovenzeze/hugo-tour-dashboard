#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
# You might want to adjust the base branch if it's not 'main'
BASE_BRANCH="main"
COMMIT_MESSAGE="docs: Update CHANGELOG.md for release"
CHANGELOG_FILE="CHANGELOG.md"
PYTHON_SCRIPT="scripts/generate_changelog.py"
# --- End Configuration ---

# --- Helper Functions ---
check_command() {
  if ! command -v "$1" &> /dev/null; then
    echo "Error: Required command '$1' not found. Please install it and ensure it's in your PATH."
    exit 1
  fi
}
# --- End Helper Functions ---

# 0. Environment Checks
echo "Checking prerequisites (git, gh, python3)..."
check_command "git"
check_command "gh"
check_command "python3"

if [ ! -f "$PYTHON_SCRIPT" ]; then
    echo "Error: Python helper script not found at $PYTHON_SCRIPT"
    exit 1
fi

# 1. Check for clean working directory
if ! git diff --quiet HEAD --; then
  echo "Error: Working directory is not clean. Please commit or stash changes."
  exit 1
fi

# 2. Fetch latest changes and tags from origin
echo "Fetching latest changes from origin..."
git fetch origin --tags # Fetch tags as well

# 3. Get latest tag
LATEST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1) 2>/dev/null || echo "No tags found")
echo "Latest tag found: $LATEST_TAG"

# 4. Create a unique branch name
BRANCH_NAME="release/changelog-$(date +%Y%m%d%H%M%S)"
echo "Creating new branch: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME" "origin/$BASE_BRANCH"

# 5. Generate CHANGELOG.md using Python script (Simulation)
echo "Generating ${CHANGELOG_FILE} using ${PYTHON_SCRIPT} (Simulation)..."
# Pass the latest tag to the python script as an argument
if python3 "$PYTHON_SCRIPT" "$LATEST_TAG" > "$CHANGELOG_FILE"; then
    echo "${CHANGELOG_FILE} generated successfully."
    echo "-------------------- CONTENT PREVIEW --------------------"
    head -n 20 "${CHANGELOG_FILE}"
    echo "---------------------------------------------------------"
    echo "IMPORTANT: The content above was generated by the *simulated* LLM logic."
    echo "           Remember to replace the simulation in $PYTHON_SCRIPT with actual LLM calls."
else
    echo "Error: Failed to generate ${CHANGELOG_FILE} using ${PYTHON_SCRIPT}."
    # Attempt to switch back to the original branch on error
    git checkout "$BASE_BRANCH" || echo "Warning: Failed to switch back to $BASE_BRANCH"
    git branch -D "$BRANCH_NAME" || echo "Warning: Failed to delete branch $BRANCH_NAME"
    exit 1
fi

# Pause for user review if needed (optional)
# read -p "Review the generated ${CHANGELOG_FILE}. Press Enter to continue or Ctrl+C to abort..."

# 6. Add and commit the changelog
echo "Adding and committing ${CHANGELOG_FILE}..."
git add "${CHANGELOG_FILE}"
git commit -m "$COMMIT_MESSAGE"

# 7. Push the new branch to origin
echo "Pushing branch $BRANCH_NAME to origin..."
git push -u origin "$BRANCH_NAME"

# 8. Create Pull Request using GitHub CLI
echo "Creating Pull Request..."
PR_TITLE="Docs: Update Changelog for Next Release"
# Append which tag range was used in the body
if [ "$LATEST_TAG" != "No tags found" ]; then
    PR_BODY="This PR updates the ${CHANGELOG_FILE} based on recent changes since tag \`${LATEST_TAG}\`.\\n\\n*Generated via automated script.*"
else
    PR_BODY="This PR updates the ${CHANGELOG_FILE} based on all commits (no previous tag found).\\n\\n*Generated via automated script.*"
fi

echo "Attempting to create PR using 'gh cli'...\"\n# Corrected trap using double quotes to allow variable expansion\ntrap \"echo \\\"Attempting to clean up branch $BRANCH_NAME...\\\"; \\\\n      git push origin --delete \\\"$BRANCH_NAME\\\" 2>/dev/null || echo \\\"Warning: Could not delete remote branch.\\\"; \\\\n      git checkout \\\"$BASE_BRANCH\\\" 2>/dev/null || echo \\\"Warning: Could not checkout base branch.\\\"; \\\\n      git branch -D \\\"$BRANCH_NAME\\\" 2>/dev/null || echo \\\"Warning: Could not delete local branch.\\\"; \\\\n      echo \\\"Cleanup attempt finished for branch $BRANCH_NAME.\\\"\" ERR\n\ngh pr create \\\\n    --base \"$BASE_BRANCH\" \\\\n    --head \"$BRANCH_NAME\" \\\\n    --title \"$PR_TITLE\" \\\\n    --body \"$PR_BODY\"\n\n# Clear the trap on successful PR creation\ntrap - ERR

echo "Pull Request created successfully!"
echo "Script completed successfully."

exit 0 